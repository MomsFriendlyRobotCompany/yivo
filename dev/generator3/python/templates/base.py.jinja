# Do not edit, this is autogenerated
# {{ license_notice }}
{# import dataclasses #}

class FixedArray:
    def __init__(self, size, initial_value=0):
        self._data = [initial_value] * size
        self._size = size
        # self._dtype = dtype

    def __getitem__(self, key):
        if isinstance(key, slice):
            if key.start < 0:
                raise IndexError("Start index < 0")
            if key.stop > self._size:
                raise IndexError(f"End slice index > {self._size}")
            # Handle slicing (e.g., obj[start:stop:step])
            return self._data[key.start:key.stop:key.step]
        elif isinstance(key, int):
            return self._data[key]
        else:
            raise TypeError("Invalid index type")

    def __setitem__(self, key, value):
        if isinstance(key, slice):
            if key.start < 0:
                raise IndexError("Start index < 0")
            if key.stop > self._size:
                raise IndexError(f"End slice index > {self._size}")
            # Handle slicing (e.g., obj[start:stop:step])
            self._data[key.start:key.stop:key.step] = value
        elif isinstance(key, int):
            if not (0 <= index < self._size):
                raise IndexError("Index out of range")
            self._data[key] = value
        else:
            raise TypeError("Invalid index type")

    def __len__(self):
        return self._size

    def __str__(self):
        return str(self._data)

    def __repr__(self):
        return str(self)

def id2str(id):
    {% for msg in messages -%}
    if id == {{ msg.id }}: return "{{ msg.name|lower }}"
    {% endfor -%}
    return "UNKNOWN"

class Base:
    def flatten(self, data):
        """
        (0, (1, 2, 3), (4, 5, 6)) -> (0, 1, 2, 3, 4, 5, 6)
        """
        if isinstance(data, tuple):
            for x in data:
                yield from self.flatten(x)
        else:
            yield data

    def serialize(self):
        return tuple(self.flatten(dataclasses.astuple(self)))


def fmt(a):
    return a.__yivo__()[0]

def sizeof(a):
    return a.__yivo__()[1]

def cls(a):
    {# return a.__yivo__()[2] #}
    return a.__class__

def msg_id(a):
    return a.__yivo__()[2]