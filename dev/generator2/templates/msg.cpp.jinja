#pragma once

#include <stdint.h>
#include <stdbool.h>
#include <string>
{%- for inc in includes %}
#include "{{ inc }}.h"
{%- endfor %}


#ifdef __cplusplus
extern "C" {
#endif

#define {{ name|upper }}_MSG_SIZE {{ msg_size }}
#define {{ name|upper }}_MSG_ID {{ msgid }}

{%- if constants|length > 0 %}
{%- for c in constants %}
#define {{ name|upper }}_{{ c.var|upper }} {{ c.value }}
{%- endfor -%}
{% endif -%}


{% if enums|length > 0 %}
{%- for enum in enums %}
{# enum {{ name|lower }}_{{ enum.name }} {%- if enum.size %}: {{ enum.size }} {% endif %}{ #}

typedef enum {%- if enum.size %}: {{ enum.size }} {% endif %}{
{%- for val in enum.values %}
  {{ val }} {%- if loop.index != loop.length %}, {% endif -%}
{% endfor %}
} {{ name|lower }}_{{ enum.name|lower }}_e;
{% endfor %}
{% endif %}

typedef struct {
{%- for var in vars %}
  {% if var.size > 0 -%}
  {{ var.type }}[{{ var.size }}] {{ var.var }};
  {% else -%}
  {{ var.type }} {{ var.var }};
  {%- endif -%}
{%- endfor %}

{%- if functions|length > 0 -%}
{% for line in functions %}
  {{ line }}
{%- endfor %}
{%- endif %}

} __attribute__((packed)) {{ name }}_t;

#ifdef __cplusplus
}
#endif

{# static
{{ name }}_t {{ name }}_init(
    {%- for a in args -%}
    const {{ a[0] }} {{ a[1] }}
    {%- if loop.index != loop.length %}, {% endif -%}
    {%- endfor -%}
) {
  {{ name }}_t ret;

  {%- for a in args%}
  ret.{{ a[2] }} = {{ a[2] }};
  {%- endfor %}

  return ret;
} #}

{# inline
message_t {{ name }}_ypkt_pack(const {{ name }}_t& msg) {
  message_t msg = yivo.pack({{ msgid }}, (uint8_t*)&msg, {{msg_size}});
  return msg;
} #}

{% if yivo %}
#include <yivo.h>

static uint8_t yivo_buffer[msg_size + 7];

inline
message_t {{ name }}_ypkt_pack(const {{ name }}_t& msg) {
  return yivo.pack({{ msgid }}, (uint8_t*)&msg, {{msg_size}});
}

{% endif %}

{#
static
void print(const {{ name }}_t &val) {
    printf(
    {%- for a in args -%}
      {%-   if {{ a[0] }} == "float" -%} "%f "
      {%- elif {{ a[0] }} == "double" -%} "%lf "
      {%- elif {{ a[0] }} == "uint8_t" -%} "%zu "
      {% endif -%}
    {%- endfor -%}

    {%- for a in args -%}
    ,{{ a[1] }}
    {%- endfor -%}
    );
} #}
{# 
{% if namespace %}
} // end namespace
{% endif %} #}