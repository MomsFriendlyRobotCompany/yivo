# Do not edit, this is autogenerated
# 
###############################################################################
from enum import IntEnum
from collections import namedtuple
from dataclasses import dataclass



yivo_info = namedtuple("yivo_info","id fmt size name")
class battery_tech_e(IntEnum):
    UNKNOWN = 0 # Unknown battery technology 
    NIMH = -1 # Nickel-Metal Hydride battery 
    LION = -2 # Lithium-ion battery 
    LIPO = 3 # Lithium Polymer battery 
    LIFE = 4 # Lithium Iron Phosphate battery 
    NICD = 5 # Nickel-Cadmium battery 
    LIMN = 6 # Lithium Manganese Dioxide battery 
    TERNARY = 7 # Ternary Lithium battery 
    VRLA = 8 # Valve Regulated Lead-Acid battery 

class frames_e(IntEnum):
    ROBOT = 1
    IMU = 2
    CAMERA = 3

class calibration_e(IntEnum):
    ACCEL = 1
    GYRO = 2
    MAG = 4
    MOTORS = 8



ids2names = {

    100: "imuf_t",
    101: "press_t",
    102: "pose_t",
    103: "calibrate_t",
    104: "cal_params_t",
}

names2ids = {

    "imuf_t": 100,
    "press_t": 101,
    "pose_t": 102,
    "calibrate_t": 103,
    "cal_params_t": 104,
}

def id2str(id):
    return ids2names[id]

def name2id(name):
    return names2ids[name]

class Base:
    def flatten(self, data):
        """
        (0, (1, 2, 3), (4, 5, 6)) -> (0, 1, 2, 3, 4, 5, 6)
        """
        if isinstance(data, tuple):
            for x in data:
                yield from self.flatten(x)
        else:
            yield data

    def to_tuple(self):
        return tuple(self.flatten(self.astuple()))


# def fmt(a):
#    return a.__yivo__()[0]

# def sizeof(a):
#    return a.__yivo__()[1]

# def cls(a):
#    
#    return a.__class__

# def msg_id(a):
#    return a.__yivo__()[2]





class vec2f_t (Base):
  """
  vec2f_t
  """

  

  def __init__(self):
    self.x =0
    self.y =0

    self.id = 0
    self.fmt = ">ff"
    self.size = 8
    self.name = "vec2f_t"

  def astuple(self):
    return (self.x,self.y,)

  def get_info(self):
    return yivo_info(0, ">ff", 8, "vec2f_t")

  def __str__(self):
    s = f"{ self.name }("
    for k,v in self.__dict__.items():
      if k in ["fmt","id","size","name"]: continue
      s+=f"{k}: {v}, "
    s+="\b\b)"
    return s

  
    
    
    
    


class vec3f_t (Base):
  """
  vec3f_t
  """

  

  def __init__(self):
    self.x =0.0
    self.y =0.0
    self.z =0.0

    self.id = 0
    self.fmt = ">fff"
    self.size = 12
    self.name = "vec3f_t"

  def astuple(self):
    return (self.x,self.y,self.z,)

  def get_info(self):
    return yivo_info(0, ">fff", 12, "vec3f_t")

  def __str__(self):
    s = f"{ self.name }("
    for k,v in self.__dict__.items():
      if k in ["fmt","id","size","name"]: continue
      s+=f"{k}: {v}, "
    s+="\b\b)"
    return s

  
    
    
    
    


class quaternion_t (Base):
  """
  quaternion_t
  """

  

  def __init__(self):
    self.w =1
    self.x =0
    self.y =0
    self.z =0

    self.id = 0
    self.fmt = ">ffff"
    self.size = 16
    self.name = "quaternion_t"

  def astuple(self):
    return (self.w,self.x,self.y,self.z,)

  def get_info(self):
    return yivo_info(0, ">ffff", 16, "quaternion_t")

  def __str__(self):
    s = f"{ self.name }("
    for k,v in self.__dict__.items():
      if k in ["fmt","id","size","name"]: continue
      s+=f"{k}: {v}, "
    s+="\b\b)"
    return s

  
    
    
    
    


class header (Base):
  """
  header
  """

  

  def __init__(self):
    self.timestamp = int() 
    self.frame = int() 

    self.id = 0
    self.fmt = ">Qi"
    self.size = 12
    self.name = "header"

  def astuple(self):
    return (self.timestamp,self.frame,)

  def get_info(self):
    return yivo_info(0, ">Qi", 12, "header")

  def __str__(self):
    s = f"{ self.name }("
    for k,v in self.__dict__.items():
      if k in ["fmt","id","size","name"]: continue
      s+=f"{k}: {v}, "
    s+="\b\b)"
    return s

  
    
    
    
    


class imuf_t (Base):
  """
  imuf_t
  """

  

  def __init__(self):
    self.a = vec3f_t() 
    self.g = vec3f_t() 
    self.m = vec3f_t() 
    self.temperature = float() 

    self.id = 100
    self.fmt = ">ffffffffff"
    self.size = 40
    self.name = "imuf_t"

  def astuple(self):
    return (self.a,self.g,self.m,self.temperature,)

  def get_info(self):
    return yivo_info(100, ">ffffffffff", 40, "imuf_t")

  def __str__(self):
    s = f"{ self.name }("
    for k,v in self.__dict__.items():
      if k in ["fmt","id","size","name"]: continue
      s+=f"{k}: {v}, "
    s+="\b\b)"
    return s

  
    
    
    
    


class press_t (Base):
  """
  press_t
  """

  

  def __init__(self):
    self.pressure = float() 
    self.temperature = float() 

    self.id = 101
    self.fmt = ">ff"
    self.size = 8
    self.name = "press_t"

  def astuple(self):
    return (self.pressure,self.temperature,)

  def get_info(self):
    return yivo_info(101, ">ff", 8, "press_t")

  def __str__(self):
    s = f"{ self.name }("
    for k,v in self.__dict__.items():
      if k in ["fmt","id","size","name"]: continue
      s+=f"{k}: {v}, "
    s+="\b\b)"
    return s

  
    
    
    
    


class pose_t (Base):
  """
  pose_t
  """

  

  def __init__(self):
    self.pos = vec3f_t() 
    self.vel = vec3f_t() 
    self.q = quaternion_t() 

    self.id = 102
    self.fmt = ">ffffffffff"
    self.size = 40
    self.name = "pose_t"

  def astuple(self):
    return (self.pos,self.vel,self.q,)

  def get_info(self):
    return yivo_info(102, ">ffffffffff", 40, "pose_t")

  def __str__(self):
    s = f"{ self.name }("
    for k,v in self.__dict__.items():
      if k in ["fmt","id","size","name"]: continue
      s+=f"{k}: {v}, "
    s+="\b\b)"
    return s

  
    
    
    
    


class calibrate_t (Base):
  """
  calibrate_t
  This is a calibration command
  """

  

  def __init__(self):
    self.cal = int() 

    self.id = 103
    self.fmt = ">i"
    self.size = 4
    self.name = "calibrate_t"

  def astuple(self):
    return (self.cal,)

  def get_info(self):
    return yivo_info(103, ">i", 4, "calibrate_t")

  def __str__(self):
    s = f"{ self.name }("
    for k,v in self.__dict__.items():
      if k in ["fmt","id","size","name"]: continue
      s+=f"{k}: {v}, "
    s+="\b\b)"
    return s

  
    
    
    
    


class cal_params_t (Base):
  """
  cal_params_t
  This is the result of a calibration command
  """

  

  def __init__(self):
    self.cal = float() 
    self.sensor = int() 

    self.id = 104
    self.fmt = ">12fi"
    self.size = 52
    self.name = "cal_params_t"

  def astuple(self):
    return (self.cal,self.sensor,)

  def get_info(self):
    return yivo_info(104, ">12fi", 52, "cal_params_t")

  def __str__(self):
    s = f"{ self.name }("
    for k,v in self.__dict__.items():
      if k in ["fmt","id","size","name"]: continue
      s+=f"{k}: {v}, "
    s+="\b\b)"
    return s

  
    
    
    
    
